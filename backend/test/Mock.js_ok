const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("VRFCoordinatorV2_5Mock Deployment", function () {
  async function deployVRFMockFixture() {
    const [owner] = await ethers.getSigners();

    const BASE_FEE = "1000000000000000"; // 0.001 ether as base fee
    const GAS_PRICE = "50000000000"; // 50 gwei
    const WEI_PER_UNIT_LINK = "10000000000000000"; // 0.01 ether per LINK

    // Déployer le MockVRFCoordinator
    const MockVRFCoordinator = await ethers.getContractFactory(
      "VRFCoordinatorV2_5Mock"
    );
    const mockVRFCoordinator = await MockVRFCoordinator.deploy(
      BASE_FEE,
      GAS_PRICE,
      WEI_PER_UNIT_LINK
    );

    const mockVRFCoordinatorAddress = await mockVRFCoordinator.getAddress();

    return {
      mockVRFCoordinator,
      mockVRFCoordinatorAddress,
      owner,
    };
  }

  describe("Fixture testing", function () {
    it("Should deploy VRFCoordinatorV2_5Mock with correct initial setup", async function () {
      const { mockVRFCoordinator, mockVRFCoordinatorAddress, owner } =
        await loadFixture(deployVRFMockFixture);

      // Vérifier que l'adresse du MockVRFCoordinator est correcte
      expect(mockVRFCoordinatorAddress).to.properAddress;

      // Vérifier que le propriétaire est bien défini
      expect(await mockVRFCoordinator.owner()).to.equal(owner.address);

      // Vérifier les paramètres initiaux
      expect(await mockVRFCoordinator.i_base_fee()).to.equal(
        ethers.parseEther("0.001")
      );
      expect(await mockVRFCoordinator.i_gas_price()).to.equal(5e10);
      expect(await mockVRFCoordinator.i_wei_per_unit_link()).to.equal(
        10000000000000000n
      );
    });
  });
});
